namespace Kook.Commands;

/// <summary>
///     Provides extension methods for <see cref="IEnumerable{T}"/>.
/// </summary>
public static class IEnumerableExtensions
{
    /// <summary>
    ///     Generates all possible combinations of elements from two collections and applies a specified function to each combination to produce a result.
    /// </summary>
    /// <typeparam name="TFirst">The type of elements in the first collection.</typeparam>
    /// <typeparam name="TSecond">The type of elements in the second collection.</typeparam>
    /// <typeparam name="TResult">The type of the results produced by the specified function.</typeparam>
    /// <param name="set">The first collection of elements to use to generate the combinations.</param>
    /// <param name="others">The second collection of elements to use to generate the combinations.</param>
    /// <param name="func">The function to apply to each combination of elements to produce a result.</param>
    /// <returns>An <see cref="IEnumerable{T}"/> of <typeparamref name="TResult"/> values generated by applying the specified function to each combination of elements.</returns>
    public static IEnumerable<TResult> Permutate<TFirst, TSecond, TResult>(
        this IEnumerable<TFirst> set,
        IEnumerable<TSecond> others,
        Func<TFirst, TSecond, TResult> func) =>
        from elem in set
        from elem2 in others
        select func(elem, elem2);
}
